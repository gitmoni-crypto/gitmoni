const crypto=require('crypto');function sha256(s){return crypto.createHash('sha256').update(s).digest('hex');}
function hashTx(tx){return sha256(JSON.stringify(tx));}
function buildMerkleTree(txs){let level=txs.map(hashTx);const tree=[level];while(level.length>1){const next=[];for(let i=0;i<level.length;i+=2){const l=level[i];const r=level[i+1]||l;next.push(sha256(l+r));}level=next;tree.unshift(level);}return{root:tree[0][0],tree};}
function getMerkleProof(tree,index){const proof=[];let idx=index;for(let i=tree.length-1;i>0;i--){const level=tree[i];const isRight=idx%2;const pairIndex=isRight?idx-1:idx+1;const pairHash=level[pairIndex]||level[idx];proof.push({direction:isRight?'left':'right',hash:pairHash});idx=Math.floor(idx/2);}return proof;}
function verifyProof(leaf,proof,root){let hash=leaf;for(const step of proof){hash=step.direction==='left'?sha256(step.hash+hash):sha256(hash+step.hash);}return hash===root;} module.exports={hashTx,buildMerkleTree,getMerkleProof,verifyProof};