const EC = elliptic.ec; const ec = new EC('secp256k1');
let keyPair;
function sha256hex(str){const utf8=new TextEncoder().encode(str);return elliptic.utils.sha256(utf8);}
function pubkeyToAddress(pubkeyHex){const pubBytes=new TextEncoder().encode(pubkeyHex);const hashHex=elliptic.utils.sha256(pubBytes);return hashHex.slice(0,16);}
function generateKeys(){keyPair=ec.genKeyPair();const priv=keyPair.getPrivate('hex');const pub=keyPair.getPublic(true,'hex');const addr=pubkeyToAddress(pub);document.getElementById('key-output').textContent=`Private Key:\n${priv}\n\nPublic Key:\n${pub}\n\nDerived Address:\n${addr}`;}
function signTransaction(e){e.preventDefault();if(!keyPair){alert('Generate keys first!');return;}const to=document.getElementById('to').value;const amount=parseFloat(document.getElementById('amount').value);const pubkey=keyPair.getPublic(true,'hex');const from=pubkeyToAddress(pubkey);const message=`${from}->${to}:${amount}`;const hashHex=sha256hex(message);const sig=keyPair.sign(hashHex,{canonical:true});const derSig=sig.toDER('hex');const tx={from,to,amount,pubkey,sig:derSig};document.getElementById('signed-output').textContent=JSON.stringify(tx,null,2);}