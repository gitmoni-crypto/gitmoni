name: Star Faucet (every 10m)

on:
  schedule:
    - cron: "*/10 * * * *"   # every 10 minutes (UTC)
  workflow_dispatch: {}

jobs:
  faucet:
    runs-on: ubuntu-latest
    env:
      OWNER: gitmoni-crypto
      REPO:  gitmoni
      TX_BRANCH: transactions
      FAUCET_ADDR: gh:system
      # grant for rank #1
      G1: "1618033989"
      # comma-separated GitHub logins to skip (lowercase). Include owner + bots.
      EXCLUDE_LOGINS: "github-actions[bot],dummyusername,badguy123"

    steps:
      - name: Checkout transactions
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TX_BRANCH }}
          path: tx

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build faucet txs for new stargazers
        run: |
          set -euo pipefail
          cd tx
          mkdir -p data/txs

          node - <<'JS'
          import fs from 'fs';
          import path from 'path';

          const OWNER   = process.env.OWNER;
          const REPO    = process.env.REPO;
          const G1      = BigInt(process.env.G1 || "1618033989");
          const FAUCET  = process.env.FAUCET_ADDR || "gh:system";
          const EXCLUDE = new Set(
            (process.env.EXCLUDE_LOGINS || '').split(',')
              .map(s => s.trim().toLowerCase())
              .filter(Boolean)
          );

          // --- GitHub fetch helpers (Node 20 has global fetch)
          async function listStargazersChrono() {
            const out = [];
            let page = 1;
            while (true) {
              const url = `https://api.github.com/repos/${OWNER}/${REPO}/stargazers?per_page=100&page=${page}`;
              const r = await fetch(url, {
                headers: {
                  'Authorization': `Bearer ${process.env.GITHUB_TOKEN}`,
                  'Accept': 'application/vnd.github.star+json'
                }
              });
              if (!r.ok) break;
              const data = await r.json();
              if (!Array.isArray(data) || data.length === 0) break;
              for (const s of data) {
                const login = (s?.user?.login || '').toLowerCase();
                if (!login || EXCLUDE.has(login)) continue; // skip owner/bots
                out.push({ login, starred_at: s.starred_at });
              }
              page++;
            }
            out.sort((a,b)=> new Date(a.starred_at) - new Date(b.starred_at));
            return out;
          }

          // Scan existing ledger for: (a) recipients already paid by faucet; (b) faucet nonce
          function loadPaidAndFaucetNonce() {
            const txDir = 'data/txs';
            const files = fs.existsSync(txDir) ? fs.readdirSync(txDir).filter(f => f.endsWith('.json')) : [];
            const paid = new Set();
            let faucetNonce = 0;

            for (const f of files.sort()) {
              try {
                const t = JSON.parse(fs.readFileSync(path.join(txDir, f), 'utf8'));
                if (!t || typeof t !== 'object') continue;
                if (t.from === FAUCET) {
                  faucetNonce++;
                  if (typeof t.memo === 'string' && t.memo.startsWith('star:rank=')) {
                    paid.add(t.to); // mark recipient as paid
                  }
                }
              } catch { /* ignore corrupt */ }
            }
            return { paid, faucetNonce };
          }

          const grantForRank = (rank) => (G1 / BigInt(rank)); // floor

          function buildTxFile({from, to, amount, nonce, rank}) {
            const ts = Date.now();
            const iso = new Date(ts).toISOString().replace(/\.\d{3}Z/,'Z');
            const txid = `${iso}-${from}->${to}-${amount}`;
            const tx = { txid, from, to, amount: Number(amount), nonce, ts, memo: `star:rank=${rank}` };
            const file = `data/txs/${iso.replace(/[-:]/g,'')}-${from.replace(':','_')}-to-${to.replace(':','_')}-${amount}.json`;
            return { tx, file };
          }

          // LOGGING: Start main logic
          console.log('--- Faucet Workflow: Logging Stargazer and Payment Info ---');

          const { paid, faucetNonce } = loadPaidAndFaucetNonce();
          console.log(`Already paid addresses (${paid.size}):`, Array.from(paid));
          const stars = await listStargazersChrono();
          console.log(`Fetched ${stars.length} stargazers:`, stars.map(s => s.login));

          // Determine unpaid stargazers with their rank (1-based by time)
          const unpaid = [];
          for (let i = 0; i < stars.length; i++) {
            const login = stars[i].login;                    // already lowercased
            const addr  = `gh:${login}`;
            if (paid.has(addr)) {
              console.log(`Skipping ${login} (already paid)`);
              continue; // idempotent
            }
            const rank  = i + 1;
            const amt   = grantForRank(rank);
            if (amt > 0n) unpaid.push({ addr, rank, amt, login });
          }

          if (unpaid.length === 0) {
            console.log('No new stargazers to pay.');
            process.exit(0);
          }

          let nonce = faucetNonce;
          for (const u of unpaid) {
            nonce += 1;
            const { tx, file } = buildTxFile({
              from: FAUCET, to: u.addr, amount: u.amt, nonce, rank: u.rank
            });
            fs.writeFileSync(file, JSON.stringify(tx, null, 2));
            console.log(`Created ${file} :: to=${tx.to} login=${u.login} rank=${u.rank} amount=${tx.amount} nonce=${nonce}`);
          }
          JS

      - name: Push to transactions (via PAT)
        run: |
          cd tx
          git config user.name  "<your-gh-username>"
          git config user.email "<your-gh-email>"
          git add data/txs/*.json
          git commit -m "Faucet: star grants (scheduled)" || exit 0
          git push https://x-access-token:${{ secrets.PUSH_TOKEN }}@github.com/gitmoni-crypto/gitmoni.git HEAD:${{ env.TX_BRANCH }}